"use strict";(self.webpackChunkthis_is_angular_guides=self.webpackChunkthis_is_angular_guides||[]).push([[409],{2512:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return c}});var r=a(3117),n=a(102),i=(a(7294),a(3905)),l=["components"],o={contributors:"Wojciech Trawi\u0144ski"},s="Reactive programming",u={unversionedId:"software-architecture/reactive-programming",id:"software-architecture/reactive-programming",title:"Reactive programming",description:"Suggested resources",source:"@site/docs/software-architecture/reactive-programming.md",sourceDirName:"software-architecture",slug:"/software-architecture/reactive-programming",permalink:"/angular-guides/docs/software-architecture/reactive-programming",draft:!1,editUrl:"https://github.com/this-is-angular/angular-guides/edit/main/docs/software-architecture/reactive-programming.md",tags:[],version:"current",lastUpdatedBy:"Lars Gyrup Brink Nielsen",lastUpdatedAt:1653690344,formattedLastUpdatedAt:"5/27/2022",frontMatter:{contributors:"Wojciech Trawi\u0144ski"},sidebar:"guidesSidebar",previous:{title:"Build a micro frontend application",permalink:"/angular-guides/docs/software-architecture/build-a-micro-frontend-application"},next:{title:"Standalone APIs",permalink:"/angular-guides/docs/category/standalone-apis"}},p={},c=[{value:"Suggested resources",id:"suggested-resources",level:2},{value:"Suggested topics",id:"suggested-topics",level:2},{value:"Reactive micro and macro architecture",id:"reactive-micro-and-macro-architecture",level:3},{value:"Filtering and subscription management",id:"filtering-and-subscription-management",level:3},{value:"Building your own observable",id:"building-your-own-observable",level:3},{value:"Building your own operator",id:"building-your-own-operator",level:3},{value:"Application/enterprise-specific operators",id:"applicationenterprise-specific-operators",level:4},{value:"Reusable operators (libraries)",id:"reusable-operators-libraries",level:4},{value:"Subscribers",id:"subscribers",level:3},{value:"Subjects",id:"subjects",level:3},{value:"Subscriptions",id:"subscriptions",level:3},{value:"<code>share</code>, <code>publish</code>, <code>refCount</code>, and <code>multicast</code>",id:"share-publish-refcount-and-multicast",level:3},{value:"Cold, hot, warm, and shared observables",id:"cold-hot-warm-and-shared-observables",level:3}],m={toc:c};function d(e){var t=e.components,a=(0,n.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"reactive-programming"},"Reactive programming"),(0,i.kt)("h2",{id:"suggested-resources"},"Suggested resources"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://realtalkjavascript.simplecast.fm/39f4a2e2"},"Real Talk JavaScript: RxJS Wizardry with Ben Lesh")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://youtu.be/wfSKE7GtKhU"},"RxJS schedulers from outer space - Performance, animations, asynchrony at ng-conf by Michael Hladky")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=y2aBiA5N4h8"},"A deep dive into RxJS subjects at Angular In Depth by Michael Hladky")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.learnrxjs.io/"},"Learn RxJS")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://rxjs.dev/guide/overview"},"Official Getting started guide")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://angular.io/guide/observables"},"Angular.io: Observables & RxJS")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://blog.nrwl.io/reactive-programming-in-angular-7dcded697e6c"},"Reactive Programming in Angular by Victor Savkin")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://blog.angularindepth.com/rxjs-understanding-subjects-5c585188c3e1"},"RxJS: Understanding Subjects by Nicholas Jamieson")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://blog.angularindepth.com/rxjs-understanding-the-publish-and-share-operators-16ea2f446635"},"RxJS: Understanding the publish and share Operators by Nicholas Jamieson")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://blog.angularindepth.com/rxjs-how-to-use-refcount-73a0c6619a4e"},"RxJS: How to Use refCount")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://gist.github.com/staltz/868e7e9bc2a7b8c1f754"},"The introduction to Reactive Programming you've been missing by Andr\xe9 Stalz"))),(0,i.kt)("h2",{id:"suggested-topics"},"Suggested topics"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Composing asynchronous software"),(0,i.kt)("li",{parentName:"ul"},"Understanding operators"),(0,i.kt)("li",{parentName:"ul"},'"Breaking the ice"',(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Reactive programming in a nutshell"),(0,i.kt)("li",{parentName:"ul"},"The Observer Pattern"),(0,i.kt)("li",{parentName:"ul"},"The building blocks of RxJS",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Observables"),(0,i.kt)("li",{parentName:"ul"},"Subscribers"),(0,i.kt)("li",{parentName:"ul"},"Subscriptions"),(0,i.kt)("li",{parentName:"ul"},"Subjects"),(0,i.kt)("li",{parentName:"ul"},"Operators"))),(0,i.kt)("li",{parentName:"ul"},"Observables are executed lazily. They don't do anything until they have a\nsubscriber."))),(0,i.kt)("li",{parentName:"ul"},"Reactive programming in more abstract terms, no RxJS specifics",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Reactive programming sweeps the intermediary states under the rug, hiding\nthem in operators"))),(0,i.kt)("li",{parentName:"ul"},"Reactive programming libraries",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://rxjs.dev/"},"RxJS")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://baconjs.github.io/"},"Bacon.js")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/politie/sherlock"},"Sherlock")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/ds300/derivablejs"},"DerivableJS")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/caolan/highland"},"Highland")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://cycle.js.org/"},"Cycle.js")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://xstate.js.org/docs/"},"XState")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://mobx.js.org/"},"MobX")))),(0,i.kt)("li",{parentName:"ul"},"Lingo",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Notifications (next, complete, error)"),(0,i.kt)("li",{parentName:"ul"},"Events/values"),(0,i.kt)("li",{parentName:"ul"},"Subscribers/observers, observables/streams"),(0,i.kt)("li",{parentName:"ul"},"Subscriptions"),(0,i.kt)("li",{parentName:"ul"},"Producers, consumers"))),(0,i.kt)("li",{parentName:"ul"},"How RxJS is used by Angular"),(0,i.kt)("li",{parentName:"ul"},"Multicasting",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"share"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"publish"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"refCount"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"multicast"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"connect"),", and connectable\nobservables"),(0,i.kt)("li",{parentName:"ul"},"Subjects"))),(0,i.kt)("li",{parentName:"ul"},"Schedulers"),(0,i.kt)("li",{parentName:"ul"},"Cold, hot, warm observables"),(0,i.kt)("li",{parentName:"ul"},"Flattening observables",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"merge*")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"exhaust*")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"switch*")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"concat*"))))),(0,i.kt)("h3",{id:"reactive-micro-and-macro-architecture"},"Reactive micro and macro architecture"),(0,i.kt)("p",null,"Concepts and techniques coined and taught by Michael Hladky."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.google.com/presentation/d/1G76QJ6EC1mwUt99exVyQqwU7FutXbulA8flweWJKubQ/edit#slide=id.g4de9327dad_0_21"},"Slides")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://stackblitz.com/edit/rxjs-operating-heavily-dynamic-uis"},"StackBlitz")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://youtu.be/XKfhGntZROQ"},"ng-conf workshop: Operate heavily dynamic UIs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://twitter.com/Michael_Hladky/status/1136327245050630144"},"Tweet with images")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://youtu.be/JIfxMHqU5xk"},"ngVikings talk: Operate heavily dynamic UI\u2019s with RxJS")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://youtu.be/YwjwYaXTLz8"},"Frontend Love workshop: RxJS Advanced Patterns Learn how to manage heavily dynamic Angular apps"))),(0,i.kt)("h3",{id:"filtering-and-subscription-management"},"Filtering and subscription management"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"takeWhile")," vs. ",(0,i.kt)("inlineCode",{parentName:"li"},"takeUntil")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"takeWhile")," when you want to unsubscribe based on an event in the observable\npipeline"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"takeUntil")," when you want to unsubscribe based on another event"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filter")," to filter out events based on their value"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.learnrxjs.io/operators/filtering/"},"Learn RxJS: Filtering operators"))),(0,i.kt)("h3",{id:"building-your-own-observable"},"Building your own observable"),(0,i.kt)("p",null,"When to build your own observable, when not to."),(0,i.kt)("h3",{id:"building-your-own-operator"},"Building your own operator"),(0,i.kt)("p",null,"Use composition of existing operators over building your own."),(0,i.kt)("h4",{id:"applicationenterprise-specific-operators"},"Application/enterprise-specific operators"),(0,i.kt)("p",null,"Usually combines a bunch of operators that are used throughout one or more\napplications, or even just in a few places but to make the code more readable."),(0,i.kt)("h4",{id:"reusable-operators-libraries"},"Reusable operators (libraries)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://realtalkjavascript.simplecast.fm/39f4a2e2"},"Real Talk JavaScript: RxJS Wizardry with Ben Lesh"))),(0,i.kt)("p",null,"Describe and test the semantics of every edge case:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"What happens when a synchronous ",(0,i.kt)("inlineCode",{parentName:"li"},"empty()")," is passed?"),(0,i.kt)("li",{parentName:"ul"},"What happens when an asynchronous ",(0,i.kt)("inlineCode",{parentName:"li"},"empty()")," is passed?"),(0,i.kt)("li",{parentName:"ul"},"What happens when a ",(0,i.kt)("inlineCode",{parentName:"li"},"NEVER")," is passed?")),(0,i.kt)("p",null,"When joining more than one observable:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"What happens when one is a ",(0,i.kt)("inlineCode",{parentName:"li"},"NEVER")," and one is not?")),(0,i.kt)("p",null,"When accepting function parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"What happens when an error happens in that function?")),(0,i.kt)("p",null,"Error handling:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Test your custom operator in isolation"),(0,i.kt)("li",{parentName:"ul"},"Errors that unsubscribe"),(0,i.kt)("li",{parentName:"ul"},"An observable goes south and drops future subscriptions (bad)")),(0,i.kt)("h3",{id:"subscribers"},"Subscribers"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://realtalkjavascript.simplecast.fm/39f4a2e2"},"Real Talk JavaScript: RxJS Wizardry with Ben Lesh"))),(0,i.kt)("p",null,"Subscribers have a subscription. They are observables with a subscription tied\nto them. Every operator sets up one subscriber."),(0,i.kt)("p",null,"Subscribers have these safety semantics:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you call ",(0,i.kt)("inlineCode",{parentName:"li"},"error")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"complete"),", the subscription is teared down and an\ninternal property call closed is flipped and make sure that you cannot call\n",(0,i.kt)("inlineCode",{parentName:"li"},"next"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"error"),", or ",(0,i.kt)("inlineCode",{parentName:"li"},"complete")," again."),(0,i.kt)("li",{parentName:"ul"},"Chain of subscribers: Error in any single point - that subscriber cannot be\nused again which means you can't pass values through it and you've\nunsubscribed from the original subscription."),(0,i.kt)("li",{parentName:"ul"},"Several strategies, the primary for protecting your observable from dying:\nCreate another observable with a flattening operator and punctuate that\nobservable with a ",(0,i.kt)("inlineCode",{parentName:"li"},"catchError"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"catchError"),": Listens to error channel on its subscriber and maps it to a\nnew observable, subscribes to that and sends its output to the flattening\noperator and shields the main chain of subscribers from ever having error\ncalled on any of them and therefore have their subscription kept active.")))),(0,i.kt)("h3",{id:"subjects"},"Subjects"),(0,i.kt)("p",null,"Subjects can be used for multicasting."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BehaviorSubjects")," have an initial state when created, so they can be used to\ncapture hot streams"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Subjects")," are for eventual values--they don't have an initial or current\nstate"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ReplaySubjects")," are used to replay streams")),(0,i.kt)("h3",{id:"subscriptions"},"Subscriptions"),(0,i.kt)("p",null,"Forgetting to unsubscribe will lead to memory leaks and side effects being run\nafter the related component is destroyed."),(0,i.kt)("p",null,"Strategies for managing subscriptions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"takeUntil(this.destroy)")," (here be dragons)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Subscription#add")," (tree of subscriptions) vs. ",(0,i.kt)("inlineCode",{parentName:"li"},"SubSink")," (array of\nsubscriptions)"),(0,i.kt)("li",{parentName:"ul"},"Manual unsubscription of every subscription")),(0,i.kt)("h3",{id:"share-publish-refcount-and-multicast"},(0,i.kt)("inlineCode",{parentName:"h3"},"share"),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"publish"),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"refCount"),", and ",(0,i.kt)("inlineCode",{parentName:"h3"},"multicast")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"refCount")," runs teardown logic when the number of subscribers goes down to 0."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"multicast")," with and without a factory."),(0,i.kt)("h3",{id:"cold-hot-warm-and-shared-observables"},"Cold, hot, warm, and shared observables"),(0,i.kt)("p",null,"An observable is cold if a new producer is created per subscriber. This implies\nthat the setup of the producer such as an HTTP call is performed on\nsubscription. Because of this, cold observables are unicast."),(0,i.kt)("p",null,"In contrast, observables are hot if their producer is created separately from\nsubscription, for example if an observable adds an event listener to an existing\nWebSocket connection. Hot observables are most often multicast."),(0,i.kt)("p",null,"Warm observables are hot but have lazy setup logic. They don't emit values until\nthey have at least one subscriber. Late subscribers might miss emitted values.\nWe can implement warm observables using the ",(0,i.kt)("inlineCode",{parentName:"p"},"publish")," operator to create a\nconnectable observable, followed by a ",(0,i.kt)("inlineCode",{parentName:"p"},"refCount")," operation to keep track of\nsubscribers."),(0,i.kt)("p",null,"Shared observables are created using the ",(0,i.kt)("inlineCode",{parentName:"p"},"share*")," operators. They act like warm\nobservables, except they are recreated if a subscription is created after their\ncompletion."))}d.isMDXComponent=!0},3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return d}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),u=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(a),d=n,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return a?r.createElement(h,l(l({ref:t},p),{},{components:a})):r.createElement(h,l({ref:t},p))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var u=2;u<i;u++)l[u]=a[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);